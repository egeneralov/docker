---
# tasks file for egeneralov.docker

- name: "verify : daemon.json"
  assert:
    that: "[{% for key in docker_daemon_json.keys() %}{% if key in daemon_json_allowed_keys %}True{% else %}, False{% endif %}{% endfor %}]"
    fail_msg: "Failed to check keys for daemon.json"
    success_msg: "root-level keys are valid"
  tags:
    - validate

- name: "verify : values"
  assert:
    that:
      - docker_release_channel in ["edge", "stable"]
      - docker_type in ["ce", "ee"]
    fail_msg: "Failed to verify values (docker_release_channel or docker_type)"
    success_msg: "values are valid"
  tags:
    - validate

- include_tasks: "{{ ansible_facts['distribution'] }}.yml"
  tags:
    - install

- name: "enshure : started/enabled dockerd"
  systemd:
    name: docker.service
    state: started
    enabled: true
  tags:
    - install

# - name: Create pass with random 16 character password. If password exists just give the password
#   ansible.builtin.debug:
#     var: mypassword
#   vars:
#     mypassword: "{{ lookup('community.general.passwordstore', 'docker-credential-helpers/docker-pass-initialized-check create=true')}}"

# - name: "install : python library"
#   pip:
#     name: docker
#   register: task_result
#   until: task_result is success
#   retries: 3
#   delay: 2
#   tags:
#     - install

- name: "configure : daemon.json"
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
  register: docker_tpl_daemon
  tags:
    - configure

- name: "configure (re)start docker"
  systemd:
    name: docker.service
    state: "{% if docker_tpl_daemon is changed %}re{% endif %}started"
  tags:
    - configure

- name: "configure : registry (no_log: true)"
  docker_login:
    registry: "{{ item.registry | default('registry-1.docker.io') }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
  with_items: "{{ docker_registry }}"
  retries: 3
  delay: 2
  no_log: true
  tags:
    - configure

- include_tasks: "network.yml"
  loop: "{{ docker_networks }}"
  loop_control:
    loop_var: net
  tags:
    - network

# - name: "configure : docker netns visibility"
#   ansible.builtin.file:
#     src: /var/run/docker/netns
#     dest: /var/run/netns
#     state: link

- include_tasks: "images.yml"
  loop: "{{ docker_images }}"
  loop_control:
    loop_var: img
  tags:
    - images

- include_tasks: "containers.yml"
  loop: "{{ docker_containers }}"
  loop_control:
    loop_var: c
  tags:
    - containers
